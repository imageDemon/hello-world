# -*- coding: utf-8 -*-
# @Time    : 2019/8/22 下午2:41
# @Author  : Mat
# @Email   : 735678367@qq.com
# @File    : lmdb_data.py
# @Software: PyCharm
import numpy as np
from PIL import Image
import os
import torch
import lmdb
import cv2
import numpy as np

filenames = '/apps/baojie/price_data/filename'
files = '/apps/baojie/price_data/files'
#general_data = '/apps/baojie/price_data/train_tf'

train_filenames = os.path.join(filenames,'train.txt')
validation_filenames = os.path.join(filenames, 'val.txt')
train_filenames  = open(train_filenames, 'r')
train_lines = train_filenames.readlines()
train_filenames.close()
print (len(train_lines))
example = train_lines[1].split()
print('a'*20)
print(example)
save_path = './data/train_data'
val_save_path = './data/val_data'
validation_filenames = open(validation_filenames, 'r')
val_lines = validation_filenames.readlines()
validation_filenames.close()
print(len(val_lines))


def list_maker(list_path):
    image_list = []
    label_list = []
    for i_path in list_path:
        image_path = i_path.split()[0]
        label_path = i_path.split()[1]
        image_list.append(os.path.join(files, image_path))
        label_list.append(label_path)
    return image_list, label_list
train_image_list, train_label_list = list_maker(train_lines)
print (len(train_image_list), train_image_list[0])
print (len(train_label_list), train_label_list[0])
val_image_list, val_label_list = list_maker(val_lines)
def checkImageIsValid(imageBin):
    if imageBin is None:
        return False
    imageBuf = np.fromstring(imageBin, dtype=np.uint8)
    img = cv2.imdecode(imageBuf, cv2.IMREAD_GRAYSCALE)
    imgH, imgW = img.shape[0], img.shape[1]
    if imgH * imgW == 0:
        return False
    return True


def writeCache(env, cache):
    with env.begin(write=True) as txn:
        for k, v in cache.iteritems():
            txn.put(k, v)


def createDataset(outputPath, imagePathList, labelList, lexiconList=None, checkValid=True):
    """
    Create LMDB dataset for CRNN training.
    ARGS:
        outputPath    : LMDB output path
        imagePathList : list of image path
        labelList     : list of corresponding groundtruth texts
        lexiconList   : (optional) list of lexicon lists
        checkValid    : if true, check the validity of every image
    """
    assert(len(imagePathList) == len(labelList))
    nSamples = len(imagePathList)
    env = lmdb.open(outputPath, map_size=1099511627776)
    cache = {}
    cnt = 1
    for i in xrange(nSamples):
        imagePath = imagePathList[i]
        label = labelList[i]
        if not os.path.exists(imagePath):
            print('%s does not exist' % imagePath)
            continue
        with open(imagePath, 'r') as f:
            imageBin = f.read()
        if checkValid:
            if not checkImageIsValid(imageBin):
                print('%s is not a valid image' % imagePath)
                continue

        imageKey = 'image-%09d' % cnt
        labelKey = 'label-%09d' % cnt
        cache[imageKey] = imageBin
        cache[labelKey] = label
        if lexiconList:
            lexiconKey = 'lexicon-%09d' % cnt
            cache[lexiconKey] = ' '.join(lexiconList[i])
        if cnt % 1000 == 0:
            writeCache(env, cache)
            cache = {}
            print('Written %d / %d' % (cnt, nSamples))
        cnt += 1
    nSamples = cnt-1
    cache['num-samples'] = str(nSamples)
    writeCache(env, cache)
    print('Created dataset with %d samples' % nSamples)


if __name__ == '__main__':
    createDataset(val_save_path, val_image_list, val_label_list)
